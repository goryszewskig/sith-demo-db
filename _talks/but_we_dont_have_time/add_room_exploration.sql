/* Setup */
drop table room_inventory;
drop table deathstar_rooms;
drop table deathstar_sections;

create table deathstar_sections (
  id integer not null primary key,
  label varchar2(200)
);

create table deathstar_rooms (
  id integer generated by default on null as identity primary key,
  name varchar2(200) not null,
  code varchar2(200) not null unique,
  section_id integer not null,
  nr_in_section integer,
  constraint deathstar_rooms_fk_section foreign key (section_id)
    references deathstar_sections( id )
);

insert into deathstar_sections(id, label) values ( 1, 'Section 1');
insert into deathstar_sections(id, label) values ( 2, 'Bridge');

insert into deathstar_rooms ( name, code, section_id, nr_in_section ) values ( 'Engine Room 1', 'ENG1', 1, 1 );
insert into deathstar_rooms ( name, code, section_id, nr_in_section ) values ( 'Vaders Chamber', 'VADER', 1, 2 );
insert into deathstar_rooms ( name, code, section_id, nr_in_section ) values ( 'Bridge', 'BRIDGE', 2, 1 );
insert into deathstar_rooms ( name, code, section_id, nr_in_section ) values ( 'Prison 1', 'PRISON1', 1, 3 );

commit;

select * from deathstar_rooms;


/* ---------------------------------------------------------------------- */
/*
  procedure add_room(
    i_name varchar2,
    i_section_id simple_integer,
    i_code varchar2 default null );

 */

select * from deathstar_sections;
select * from deathstar_rooms;

-- Start adding a new test package for exploration
create or replace package ut_deathstar_add_rooms as
  -- %suite(Exploration: Adding rooms to the deathstar)

  -- %test(Add some rooms)
  procedure add_rooms;
end;
/

create or replace package body ut_deathstar_add_rooms as

  procedure add_rooms
  as
    begin
      insert into deathstar_sections ( id, label )
        values ( -1, 'Test Section');
      insert into deathstar_sections ( id, label )
        values ( -2, 'Test Section 2');

      deathstar_room_manager.ADD_ROOM('Testroom 1', -1, 'TEST1');
      deathstar_room_manager.ADD_ROOM('Testroom 2', -1, 'TEST2');
      deathstar_room_manager.ADD_ROOM('Testroom 3', -2, 'TEST3');
      deathstar_room_manager.ADD_ROOM('Testroom 4 - NULL code', -1);
    end;
end;
/

call ut.run('ut_deathstar_add_rooms');

begin
  ut.run('ut_deathstar_add_rooms', a_force_manual_rollback=>true);
end;

select * from deathstar_rooms;

rollback;

-- SQLcl


create or replace package body ut_deathstar_add_rooms as

  procedure add_rooms
  as
    c_actual sys_refcursor;
    c_expect sys_refcursor;
    begin
      insert into deathstar_sections ( id, label )
        values ( -1, 'Test Section');
      insert into deathstar_sections ( id, label )
        values ( -2, 'Test Section 2');

      deathstar_room_manager.ADD_ROOM('Testroom 1', -1, 'TEST1');
      deathstar_room_manager.ADD_ROOM('Testroom 2', -1, 'TEST2');
      deathstar_room_manager.ADD_ROOM('Testroom 3', -2, 'TEST3');
      deathstar_room_manager.ADD_ROOM('Testroom 4 - NULL code', -1);

      open c_expect for
        select 13 id , 'Testroom 1' name        , 'TEST1' code , -1 section_id , 1 nr_in_section  from dual union all
        select 14    , 'Testroom 2'             , 'TEST2'      , -1            , 2                from dual union all
        select 15    , 'Testroom 3'             , 'TEST3'      , -2            , 1                from dual union all
        select 16    , 'Testroom 4 - NULL code' , 'TESTRO1'    , -1            , 3                from dual;

      open c_actual for
        select * from deathstar_rooms where section_id < 0 order by id desc;

      ut.expect(c_actual)
        .to_equal(c_expect)
        .exclude(ut_varchar2_list('ID'))
        .join_by('CODE')
      ;
    end;
end;
/

call ut.run('ut_deathstar_add_rooms');

-- Test erweitern
create or replace package body ut_deathstar_add_rooms as

  procedure add_rooms
  as
    c_actual sys_refcursor;
    c_expect sys_refcursor;
    begin
      insert into deathstar_sections ( id, label )
        values ( -1, 'Test Section');
      insert into deathstar_sections ( id, label )
        values ( -2, 'Test Section 2');

      deathstar_room_manager.ADD_ROOM('Testroom 1', -1, 'TEST1', 1);
      deathstar_room_manager.ADD_ROOM('Testroom 2', -1, 'TEST2', 2);
      deathstar_room_manager.ADD_ROOM('Testroom 3', -2, 'TEST3', 3);
      deathstar_room_manager.ADD_ROOM('Testroom 4 - NULL code', -1);

      open c_expect for
        select 13 id , 'Testroom 1' name        , 'TEST1' code , -1 section_id , 1 nr_in_section, 1 security_level from dual union all
        select 14    , 'Testroom 2'             , 'TEST2'      , -1            , 2              , 2                from dual union all
        select 15    , 'Testroom 3'             , 'TEST3'      , -2            , 1              , 3                from dual union all
        select 16    , 'Testroom 4 - NULL code' , 'TESTRO1'    , -1            , 3              , 1                from dual;

      open c_actual for
        select * from deathstar_rooms where section_id < 0 order by id desc;

      ut.expect(c_actual)
        .to_equal(c_expect)
        .exclude(ut_varchar2_list('ID'))
        .join_by('CODE')
      ;
    end;
end;
/

call ut.run('ut_deathstar_add_rooms');

alter table deathstar_rooms
  add security_level integer default 1 not null;

create or replace package deathstar_room_manager as
  /** Adds a new room to a section
   */
  procedure add_room(
    i_name varchar2,
    i_section_id simple_integer,
    i_code varchar2 default null,
    i_security_level positive default null);
end;
/

create or replace package body deathstar_room_manager as
  procedure add_room(
    i_name varchar2,
    i_section_id simple_integer,
    i_code varchar2 default null,
    i_security_level positive default null )
  as
    l_max_nr_in_section integer;
    l_code varchar2(20) := i_code;
    l_code_max_nr integer;
    begin
      select nvl(max(nr_in_section),0) into l_max_nr_in_section
        from deathstar_rooms
        where section_id = i_section_id;

      if ( i_code is null ) then
        l_code := upper(replace(substr(i_name, 1, 6), ' ', '_'));
        select
          nvl(max(regexp_substr(substr(code, 7), '[0-9]+', 1, 1)),0)
            into l_code_max_nr
          from deathstar_rooms
          where
            substr(code, 1, 6) = l_code
            and regexp_like(substr(code, 7), '^[0-9]+$');

        l_code := l_code || to_char(l_code_max_nr+1);
      end if;

      insert into deathstar_rooms ( name, code, section_id, nr_in_section, security_level )
        values ( i_name, l_code, i_section_id, l_max_nr_in_section+1, nvl(i_security_level,1));
    end;
end;
/


call ut.run('ut_deathstar_add_rooms');